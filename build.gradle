plugins {
    id 'com.jfrog.bintray' version '1.1'
    id 'com.github.jruby-gradle.base' version '0.1.5'
    id 'java'
    id 'checkstyle'
}
import com.github.jrubygradle.JRubyExec

allprojects {
    group = 'org.embulk.executor.mapreduce'
    version = '0.4.0'
}

subprojects {
    apply plugin: 'maven'  // install jar files to the local repo: $ gradle install
    apply plugin: 'java'
    //apply plugin: 'findbugs'
    //apply plugin: 'jacoco'
    apply plugin: 'com.github.jruby-gradle.base'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    configurations {
        provided
        // exclude xercesImpl and xml-apis jars that causes a problem with javax.xml.parsers.DocumentBuilderFactory.
        // JVM includes javax.xml API and implementations by default.
        compile.exclude group: 'xerces'
    }

    jacoco {
        reportsDir = file("$buildDir/jacoco_reports")
    }

    test {
        finalizedBy jacocoTestReport // jacocoTestReport is executed after test task.
    }

    dependencies {
        compile  'org.embulk:embulk-core:0.8.25'
        provided 'org.embulk:embulk-core:0.8.25'

        testCompile 'junit:junit:4.+'
        testCompile 'org.embulk:embulk-core:0.8.25:tests'
        testCompile 'org.embulk:embulk-standards:0.8.25'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    task classpath(type: Copy, dependsOn: ["jar"]) {
        doFirst { file('classpath').deleteDir() }
        from (configurations.runtime - configurations.provided + files(jar.archivePath))
        into 'classpath'
    }
    clean { delete 'classpath' }

    checkstyle {
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        toolVersion = '6.14.1'
    }
    checkstyleMain {
        configFile = file("${project.rootDir}/config/checkstyle/default.xml")
        ignoreFailures = true
    }
    checkstyleTest {
        configFile = file("${project.rootDir}/config/checkstyle/default.xml")
        ignoreFailures = true
    }
    task checkstyle(type: Checkstyle) {
        classpath = sourceSets.main.output + sourceSets.test.output
        source = sourceSets.main.allJava + sourceSets.test.allJava
    }

    task gem(type: JRubyExec, dependsOn: ['build', 'gemspec', 'classpath']) {
        jrubyArgs '-rrubygems/gem_runner', "-eGem::GemRunner.new.run(ARGV)", 'build'
        script "${project.projectDir.absolutePath}/build/gemspec"
        doLast { ant.move(file: "${project.name}-${project.version}.gem", todir: "${parent.projectDir}/pkg") }
    }

    task gemPush(type: JRubyExec, dependsOn: ["gem"]) {
        jrubyArgs "-rrubygems/gem_runner", "-eGem::GemRunner.new.run(ARGV)", "push"
        script "${parent.projectDir}/pkg/${project.name}-${project.version}.gem"
    }

    task gemspec << {
        file('build').mkdirs();
        file('build/gemspec').write($/
Gem::Specification.new do |spec|
  spec.name          = "${project.name}"
  spec.version       = "${project.version}"
  spec.authors       = ["Sadayuki Furuhashi"]
  spec.summary       = %[MapReduce executor plugin for Embulk]
  spec.description   = %[Executes tasks on Hadoop.]
  spec.email         = ["frsyuki@gmail.com"]
  spec.licenses      = ["Apache 2.0"]
  spec.homepage      = "https://github.com/embulk/embulk-executor-mapreduce"

  spec.files         = `git ls-files`.split("\n") + Dir["classpath/*.jar"]
  spec.test_files    = spec.files.grep(%r"^(test|spec)/")
  spec.require_paths = ["lib"]
end
/$)
    }
}
